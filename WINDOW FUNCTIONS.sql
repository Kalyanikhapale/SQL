# Window Functions 
USE mavenmovies;

/* Q.1 Rank the customers based on the total amount they've spent on rentals*/
SELECT c.customer_id, c.first_name, c.last_name, 
       SUM(p.amount) AS total_spent,
       RANK() OVER (ORDER BY SUM(p.amount) DESC) AS spending_rank
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name;

/* Q.2 Calculate the cumulative revenue generated by each film over time*/
SELECT f.title, p.payment_date, SUM(p.amount) AS payment_amount,
       SUM(SUM(p.amount)) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY f.film_id, f.title, p.payment_date;

/* Q.3 Determine the average rental duration for each film, considering films with similar lengths*/
SELECT film_id, title, length, rental_duration,
       AVG(rental_duration) OVER (PARTITION BY length) AS avg_duration_similar_length
FROM film;

/* Q.4 Identify the top 3 films in each category based on their rental counts*/
WITH film_rentals AS (
  SELECT c.name AS category, f.title, COUNT(r.rental_id) AS rental_count
  FROM category c
  JOIN film_category fc ON c.category_id = fc.category_id
  JOIN film f ON fc.film_id = f.film_id
  JOIN inventory i ON f.film_id = i.film_id
  JOIN rental r ON i.inventory_id = r.inventory_id
  GROUP BY c.name, f.title
),
ranked_films AS (
  SELECT *,
         RANK() OVER (PARTITION BY category ORDER BY rental_count DESC) AS category_rank
  FROM film_rentals
)
SELECT *
FROM ranked_films
WHERE category_rank <= 3;

/* Q.5 Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers*/
WITH customer_rentals AS (
  SELECT c.customer_id, c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals
  FROM customer c
  JOIN rental r ON c.customer_id = r.customer_id
  GROUP BY c.customer_id
)
SELECT customer_id, first_name, last_name, total_rentals,
       total_rentals - AVG(total_rentals) OVER () AS diff_from_avg
FROM customer_rentals;

/* Q.6 Find the monthly revenue trend for the entire rental store over time*/
SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month,
       SUM(amount) AS monthly_revenue,
       SUM(SUM(amount)) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS running_total
FROM payment
GROUP BY DATE_FORMAT(payment_date, '%Y-%m');

/* Q.7 Identify the customers whose total spending on rentals falls within the top 20% of all customers*/
SELECT COUNT(DISTINCT customer_id) FROM customer;
--  599 â†’ 20% = 120.
SELECT c.customer_id, c.first_name, c.last_name,
       SUM(p.amount) AS total_spent
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id
ORDER BY total_spent DESC
LIMIT 120;  -- Replace 120 with our own 20% number

/* Q.8 Calculate the running total of rentals per category, ordered by rental count.*/
SELECT category, total_rentals,
       SUM(total_rentals) OVER (ORDER BY total_rentals DESC) AS running_total
FROM (
  SELECT c.name AS category, COUNT(r.rental_id) AS total_rentals
  FROM rental r
  JOIN inventory i ON r.inventory_id = i.inventory_id
  JOIN film f ON i.film_id = f.film_id
  JOIN film_category fc ON f.film_id = fc.film_id
  JOIN category c ON fc.category_id = c.category_id
  GROUP BY c.name
) AS category_rentals;

/* Q.9 Find the films that have been rented less than the average rental count for their respective categories*/
WITH category_avg AS (
  SELECT c.name AS category, f.film_id, f.title, COUNT(r.rental_id) AS rental_count,
         AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.name) AS avg_rentals
  FROM film f
  JOIN film_category fc ON f.film_id = fc.film_id
  JOIN category c ON fc.category_id = c.category_id
  JOIN inventory i ON f.film_id = i.film_id
  JOIN rental r ON i.inventory_id = r.inventory_id
  GROUP BY c.name, f.film_id
)
SELECT * FROM category_avg
WHERE rental_count < avg_rentals;

/* Q.10 Identify the top 5 months with the highest revenue and display the revenue generated in each month*/
SELECT month, monthly_revenue
FROM (
  SELECT DATE_FORMAT(payment_date, '%Y-%m') AS month,
         SUM(amount) AS monthly_revenue,
         RANK() OVER (ORDER BY SUM(amount) DESC) AS revenue_rank
  FROM payment
  GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
) AS ranked_months
WHERE revenue_rank <= 5;